ll powmod(ll x, ll y, ll m) {
    assert (0 <= x and x < m);assert (0 <= y);
    ll z = 1;
    for (ll i = 1; i <= y; i <<= 1) {
        if (y & i) z = z * x % m; x = x * x % m;}
    return z;}
ll modinv(ll x, ll p) {
    assert (x % p != 0);return powmod(x, p - 2, p);}
template <int32_t MOD>
int32_t fact(ll n) {static vector<int32_t> memo(1, 1);
    while (n >= memo.size()) {memo.push_back(memo.back() *(int64_t) memo.size() % MOD);}
    return memo[n];}
template <int32_t PRIME>
int32_t inv_fact(ll n) {
    static vector<int32_t> memo(1, 1);
    while (n >= memo.size()) {memo.push_back(memo.back() *(int64_t) modinv(memo.size(), PRIME) % PRIME);}
    return memo[n];}
template <int MOD>
ll choose(ll n, ll r) {
    if (n < r) return 0;
    return fact<MOD>(n) *(ll) inv_fact<MOD>(n - r) % MOD *(ll) inv_fact<MOD>(r) % MOD;}
template <ll MOD>
ll bernoulli_number(ll i) {
    static vector<ll> dp(1, 1);
    while (dp.size() <= i) {
    ll n = dp.size();ll acc = 0;
        rep(k, n) {
            acc += choose<MOD>(n + 1, k) *(ll) dp[k] % MOD;}acc %= MOD;
        (acc *= modinv(n + 1, MOD)) %= MOD;acc = (acc == 0 ? 0 : MOD - acc);
        dp.push_back(acc);}
    return dp[i];}
template <ll MOD>
ll sum_of_pow(ll n, int k) {
    ll acc = 0; rep(j, k + 1) {
        acc += choose<MOD>(k + 1, j) *(ll) bernoulli_number<MOD>(j) % MOD *(ll) powmod(n % MOD, k - j + 1, MOD) % MOD;}
    acc %= MOD;(acc *= modinv(k + 1, MOD)) %= MOD;
    return acc;}

constexpr int MOD = 1e9 + 7;

int main() {
    ll n; int k; cin >> n >> k;
    ll result = sum_of_pow<MOD>(n + 1, k);
    cout << result << endl;
    return 0;
}

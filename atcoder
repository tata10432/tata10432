//atcoder で　使うときに　いちいち　調べなくても　すむように　まとめておこう

[string] 
s.erase(n)             n文字目以降の削除
s.insert(n,x)          n文字目以降にxの挿入
s.find(x)
s.replace(n,m,x)
s.pop()
[suffix_array]
[lcp_array]
[z_algorithm]


[vector]
v.erase(v.begin()+i)   i番目の削除
v.pop_back()
replace(all(s),'a','A')

[stack]
a.push(x)
p.pop()
a.top()

[map]
mp[key].pb(x)
for(const auto &[key,value]:mp){} 吐き出し
mp.find(x)
mp.begin()->fi
mp.begin()->se
mp.rbegin()->fi
mp.rbegin()->se

[unordered_map]

[set]
a.insert(x)
a.erase(x)
a.lb(x)
a.ub(x)
a.end()
*a.rbegin()
*a.begin()

[unordered_set]

[queue]
a.push(x)
a.pop()             先頭の削除
a.front()　　　　　　先頭にアクセス

[priority_queue](PQ)
a.pop()
a.top()
PQ<ll,vec,greater<ll>> min順に取り出しになる
a.push(x)

[deque] 
a.pb(x)
a.push_front(x)
a.pop_back()
a.pop_front()
a.front()        先頭アクセス
a.back()　　　  　末尾アクセス
a[x]

[pair]
make_pair(a,b)   pair<ll,ll> p[n]とかして　p[0]=make_pair(a,b);とかできるってだけ？
sort(all(v),[](cauto& a,cauto& b){return a.second<b.second;}); secondをみたsort


[ACL]
[dsu]unionfindと同じもの dsu d(n) n頂点0辺のグラフを張る
d.merge(a,b) 辺(a,b)を足す
d.same(a,b)  a,bが連結かどうか
d.leader(a)  代表元を表示
d.size(a)    連結成分のサイズ
vector<vec> d.groups() 連結成分でグラフを分ける

[fenwick_tree] fenwick_tree<T> fw(ll n)
fw.add(p,x)          a[p]+x            O(log N)
fw.sum(l,r)          Σ[l,r-1]a_i       O(log N)


[convolution]　畳み込み
vec convolution<mod>(a,b) 


[bit全探索]
rep(bit,(1<<n)){
vec S;
rep(i,n){if(bit&(1<<i)){s.pb(i);}}
以下略
}


[FPS]
fps f(n)
f[i]=x
f=f.log()
f=f.exp()


[転倒数]
fenwick_tree<ll> fw(n);
ll res=0;
rep(i,n){
res+=i-fe.sum(0,a[i]);
fw.add(a[i],1)
}
cout<<res<<endl;
//  a[i]={0,1,2,3,4,5,6,...,n};







